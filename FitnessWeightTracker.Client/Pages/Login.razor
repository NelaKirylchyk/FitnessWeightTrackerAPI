@page "/login"
@using FitnessWeightTracker.Client.Models
@using FitnessWeightTracker.Client.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-5">
            <div class="card elevate">
                <div class="card-header">Login</div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-3" />
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" autocomplete="username" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" autocomplete="current-password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>

                    <div class="text-center my-3 text-muted">or</div>

                    <button class="btn btn-outline-primary w-100" @onclick="LoginWithGoogle">
                        Login with Google
                    </button>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert mt-3">@message</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string message;

    private async Task HandleLogin()
    {
        var token = await AuthService.LoginAsync(loginModel);
        if (!string.IsNullOrEmpty(token))
        {
            message = "Login successful!";
            Navigation.NavigateTo("/");
        }
        else
        {
            message = "Login failed.";
        }
    }

    private async Task LoginWithGoogle()
    {
        await JS.InvokeVoidAsync("eval", "window.location.href='https://localhost:7231/api/auth/signin-google'");
    }
}